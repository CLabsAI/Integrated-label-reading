import cv2
import base64
import tkinter as tk
from googleapiclient.discovery import build
import os
import pickle
from google_auth_oauthlib.flow import InstalledAppFlow
from google.auth.transport.requests import Request
from datetime import datetime
import re

# Your Vision API key
vision_api_key = 'AIzaSyDRB4CbKeF9ORqFpjHuPAHyY-S-O-UpVxc'

# Google Sheets API
SCOPES = ['https://www.googleapis.com/auth/spreadsheets']
SPREADSHEET_ID = '1qMGdUnf9elwG6JAVa8Zojcype6UpaUCdk64sDESnIk0'
RANGE_NAME = 'IN'

# Build the Vision API client
vision_service = build('vision', 'v1', developerKey=vision_api_key)

def extract_pattern(text):
    pattern1 = re.search(r'(1B8|188) (\d+ \d+JX|\d+ \d+-\d) ?\(?(\d+)\)?', text)
    pattern2 = re.search(r'(DOT \w+ \d+DIA \d+)', text)
    pattern3 = re.search(r'(DOT \d+ EA) ?\(?(\w+X) ?\(?(\d+)\)?', text)

    if pattern1:
        return f"DOT {pattern1.group(1)} {pattern1.group(2).replace('-', 'JX')} {pattern1.group(3)}"
    elif pattern2:
        return pattern2.group(1)
    elif pattern3:
        return f"{pattern3.group(1)} {pattern3.group(2)} {pattern3.group(3)}"
    else:
        print('Pattern not found')
        return text

def send_to_vision_and_sheets(image):
    _, buffer = cv2.imencode('.png', image)
    encoded_image = base64.b64encode(buffer).decode('UTF-8')
    request_body = {
        'requests': [{
            'image': {
                'content': encoded_image
            },
            'features': [{
                'type': 'TEXT_DETECTION'
            }]
        }]
    }

    response = vision_service.images().annotate(body=request_body).execute()

    if 'textAnnotations' not in response['responses'][0]:
        print("No text annotations found in the Vision API response.")
        return

    raw_text = response['responses'][0]['textAnnotations'][0]['description']
    extracted_text = extract_pattern(raw_text)

    print("Extracted and Processed text from the image:")
    print(extracted_text)

    creds = None
    if os.path.exists('token.pickle'):
        with open('token.pickle', 'rb') as token:
            creds = pickle.load(token)
    if not creds or not creds.valid:
        if creds and creds.expired and creds.refresh_token:
            creds.refresh(Request())
        else:
            flow = InstalledAppFlow.from_client_secrets_file(
                'credentials.json', SCOPES)
            creds = flow.run_local_server(port=0)
        with open('token.pickle', 'wb') as token:
            pickle.dump(creds, token)

    sheets_service = build('sheets', 'v4', credentials=creds)
    sheet = sheets_service.spreadsheets()

    timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    values = [[extracted_text, timestamp]]
    body = {'values': values}
    result = sheet.values().append(
        spreadsheetId=SPREADSHEET_ID,
        range=RANGE_NAME,
        valueInputOption='USER_ENTERED',
        body=body).execute()

    return extracted_text  # Return the extracted text

def capture_images_from_multiple_cameras():
    camera_indexes = [0, 2]
    frames = []

    for camera_index in camera_indexes:
        cap = cv2.VideoCapture(camera_index)
        if not cap.isOpened():
            print(f"Error: Could not open the camera with index {camera_index}")
            continue
        ret, frame = cap.read()
        if ret:
            frames.append(frame)
        cap.release()

    return frames

def main_gui():
    root = tk.Tk()
    root.title("OCR System")

    def on_start_click():
        captured_frames = capture_images_from_multiple_cameras()
        for frame in captured_frames:
            extracted_text = send_to_vision_and_sheets(frame)
            if "DOT" in extracted_text: 
                break  # Break out of the loop if valid pattern is detected

    start_button = tk.Button(root, text="Start OCR Process", command=on_start_click)
    start_button.pack(pady=20)
    root.mainloop()

main_gui()
