import cv2
import base64
import numpy as np
import re
import os
import pickle
from googleapiclient.discovery import build
from google_auth_oauthlib.flow import InstalledAppFlow
from google.auth.transport.requests import Request
import tkinter as tk
from PIL import Image, ImageTk

# Your Vision API key
vision_api_key = 'AIzaSyDRB4CbKeF9ORqFpjHuPAHyY-S-O-UpVxc'

# Google Sheets API
SCOPES = ['https://www.googleapis.com/auth/spreadsheets']
SPREADSHEET_ID = '1qMGdUnf9elwG6JAVa8Zojcype6UpaUCdk64sDESnIk0'  # Replace with your Spreadsheet ID
RANGE_NAME = 'IN'  # Replace with your Sheet name

def capture_image():
    # Initialize the camera
    cap = cv2.VideoCapture(0)  # 0 represents the default camera (built-in webcam)

    # Check if the camera is opened successfully
    if not cap.isOpened():
        print("Error: Could not open the camera")
        return None

    # Capture a frame from the camera
    ret, frame = cap.read()

    # Release the camera
    cap.release()

    return frame

def display_image_with_annotations(image):
    # Convert the OpenCV image to RGB format for PIL
    image_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
    pil_image = Image.fromarray(image_rgb)

    # Create a new Tkinter window
    window = tk.Tk()
    window.title("Captured Image with Text Annotations")

    # Convert the PIL image to a format suitable for Tkinter
    tk_image = ImageTk.PhotoImage(pil_image)

    # Create a label to display the image
    label = tk.Label(window, image=tk_image)
    label.pack()

    # Run the Tkinter main loop
    window.mainloop()

def send_to_vision_and_sheets(image):
    # Convert the OpenCV frame to JPEG and then encode it in base64
    ret, jpeg_image = cv2.imencode('.jpg', image)
    encoded_image = base64.b64encode(jpeg_image.tobytes()).decode('UTF-8')

    # Build the Vision API client
    vision_service = build('vision', 'v1', developerKey=vision_api_key)

    # Create the request body
    request_body = {
        'requests': [{
            'image': {
                'content': encoded_image
            },
            'features': [{
                'type': 'TEXT_DETECTION'
            }]
        }]
    }

    # Call the Vision API
    response = vision_service.images().annotate(body=request_body).execute()

    # Check if 'textAnnotations' exists in the response
    if 'textAnnotations' in response['responses'][0]:
        # Extract the text from the response
        extracted_text = response['responses'][0]['textAnnotations'][0]['description']
        print("Extracted text from the image:")
        print(extracted_text)

        # Google Sheets integration
        creds = None
        if os.path.exists('token.pickle'):
            with open('token.pickle', 'rb') as token:
                creds = pickle.load(token)
        if not creds or not creds.valid:
            if creds and creds.expired and creds.refresh_token:
                creds.refresh(Request())
            else:
                flow = InstalledAppFlow.from_client_secrets_file(
                    'credentials.json', SCOPES)
                creds = flow.run_local_server(port=0)
            with open('token.pickle', 'wb') as token:
                pickle.dump(creds, token)

        sheets_service = build('sheets', 'v4', credentials=creds)

        # Call the Sheets API
        sheet = sheets_service.spreadsheets()
        values = [[extracted_text]]
        body = {'values': values}
        result = sheet.values().append(
            spreadsheetId=SPREADSHEET_ID,
            range=RANGE_NAME,
            valueInputOption='USER_ENTERED',
            body=body).execute()

        # Loop over the text annotations to draw bounding boxes
        for text in response['responses'][0]['textAnnotations'][1:]:
            # Get the vertices of the bounding box
            vertices = [(vertex['x'], vertex['y']) for vertex in text['boundingPoly']['vertices']]
            
            # Draw the bounding box
            cv2.polylines(image, [np.array(vertices)], True, (0, 255, 0), 2)
    else:
        print("No text found in the image or there was an issue with the Vision API request.")
        return

    # Display the image with bounding boxes using Tkinter
    display_image_with_annotations(image)

# Capture an image using the camera
captured_frame = capture_image()

# Send the captured image to Vision API and then to Google Sheets
send_to_vision_and_sheets(captured_frame)
